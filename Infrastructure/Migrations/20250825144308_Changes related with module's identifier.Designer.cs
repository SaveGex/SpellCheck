// <auto-generated />
using System;
using DomainData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DomainData.Migrations
{
    [DbContext(typeof(SpellTestDbContext))]
    [Migration("20250825144308_Changes related with module's identifier")]
    partial class Changesrelatedwithmodulesidentifier
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Models.DifficultyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Difficul__3214EC071CD4BFD4");

                    b.ToTable("Difficulty_Level", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Files__3214EC0755E9AEE8");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Infrastructure.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FromIndividualId")
                        .HasColumnType("int")
                        .HasColumnName("from_individual_id");

                    b.Property<int>("ToIndividualId")
                        .HasColumnType("int")
                        .HasColumnName("to_individual_id");

                    b.HasKey("Id")
                        .HasName("PK__Friends__3214EC0787ADD9A2");

                    b.HasIndex("ToIndividualId");

                    b.HasIndex(new[] { "FromIndividualId", "ToIndividualId" }, "UQ_from_individual_to_individual_ids")
                        .IsUnique();

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Infrastructure.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("IdentifierName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Identifier_Name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK__Modules__3214EC079E5E094A");

                    b.HasIndex(new[] { "Identifier" }, "IX_Modules_Identifier")
                        .IsUnique();

                    b.HasIndex(new[] { "IdentifierName" }, "IX_Modules_Identifier_Name_NotNull")
                        .IsUnique()
                        .HasFilter("([Identifier_Name] IS NOT NULL)");

                    b.HasIndex(new[] { "AuthorId" }, "IX_Modules_User_Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Infrastructure.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Roles_Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Roles_Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("Deleted_At");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Number")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC07EF14166B");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email_NotNull")
                        .IsUnique()
                        .HasFilter("([Email] IS NOT NULL)");

                    b.HasIndex(new[] { "Number" }, "IX_Users_Number_NotNull")
                        .IsUnique()
                        .HasFilter("([Number] IS NOT NULL)");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Infrastructure.Models.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("Author_Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_Id");

                    b.HasKey("Id")
                        .HasName("PK__Words__3214EC07AEB353A1");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("ModuleUser", b =>
                {
                    b.Property<int>("UserModulesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("UserModulesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ModuleUser");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("Infrastructure.Models.Friend", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "FromIndividual")
                        .WithMany("FriendFromIndividuals")
                        .HasForeignKey("FromIndividualId")
                        .IsRequired()
                        .HasConstraintName("FK_from_individual_Friend_id_Users");

                    b.HasOne("Infrastructure.Models.User", "ToIndividual")
                        .WithMany("FriendToIndividuals")
                        .HasForeignKey("ToIndividualId")
                        .IsRequired()
                        .HasConstraintName("FK_to_individual_Friend_id_Users");

                    b.Navigation("FromIndividual");

                    b.Navigation("ToIndividual");
                });

            modelBuilder.Entity("Infrastructure.Models.Module", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "Author")
                        .WithMany("CreatedModules")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Modules_Users");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Infrastructure.Models.Word", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("Words")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Words_Users");

                    b.HasOne("Infrastructure.Models.DifficultyLevel", "DifficultyNavigation")
                        .WithMany("Words")
                        .HasForeignKey("DifficultyId")
                        .HasConstraintName("FK_Difficulty_Difficulty_Level");

                    b.HasOne("Infrastructure.Models.Module", "Module")
                        .WithMany("Words")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("FK_Words_Modules");

                    b.Navigation("DifficultyNavigation");

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModuleUser", b =>
                {
                    b.HasOne("Infrastructure.Models.Module", null)
                        .WithMany()
                        .HasForeignKey("UserModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Infrastructure.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.DifficultyLevel", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("Infrastructure.Models.Module", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("Infrastructure.Models.User", b =>
                {
                    b.Navigation("CreatedModules");

                    b.Navigation("FriendFromIndividuals");

                    b.Navigation("FriendToIndividuals");

                    b.Navigation("Words");
                });
#pragma warning restore 612, 618
        }
    }
}
